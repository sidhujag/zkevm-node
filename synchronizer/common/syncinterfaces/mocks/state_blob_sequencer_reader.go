// Code generated by mockery. DO NOT EDIT.

package mock_syncinterfaces

import (
	context "context"

	pgx "github.com/jackc/pgx/v4"
	mock "github.com/stretchr/testify/mock"

	state "github.com/0xPolygonHermez/zkevm-node/state"
)

// StateBlobSequencerReader is an autogenerated mock type for the StateBlobSequencerReader type
type StateBlobSequencerReader struct {
	mock.Mock
}

type StateBlobSequencerReader_Expecter struct {
	mock *mock.Mock
}

func (_m *StateBlobSequencerReader) EXPECT() *StateBlobSequencerReader_Expecter {
	return &StateBlobSequencerReader_Expecter{mock: &_m.Mock}
}

// GetLastBlobSequence provides a mock function with given fields: ctx, dbTx
func (_m *StateBlobSequencerReader) GetLastBlobSequence(ctx context.Context, dbTx pgx.Tx) (*state.BlobSequence, error) {
	ret := _m.Called(ctx, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastBlobSequence")
	}

	var r0 *state.BlobSequence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx) (*state.BlobSequence, error)); ok {
		return rf(ctx, dbTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx) *state.BlobSequence); ok {
		r0 = rf(ctx, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.BlobSequence)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx) error); ok {
		r1 = rf(ctx, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateBlobSequencerReader_GetLastBlobSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastBlobSequence'
type StateBlobSequencerReader_GetLastBlobSequence_Call struct {
	*mock.Call
}

// GetLastBlobSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTx pgx.Tx
func (_e *StateBlobSequencerReader_Expecter) GetLastBlobSequence(ctx interface{}, dbTx interface{}) *StateBlobSequencerReader_GetLastBlobSequence_Call {
	return &StateBlobSequencerReader_GetLastBlobSequence_Call{Call: _e.mock.On("GetLastBlobSequence", ctx, dbTx)}
}

func (_c *StateBlobSequencerReader_GetLastBlobSequence_Call) Run(run func(ctx context.Context, dbTx pgx.Tx)) *StateBlobSequencerReader_GetLastBlobSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx))
	})
	return _c
}

func (_c *StateBlobSequencerReader_GetLastBlobSequence_Call) Return(_a0 *state.BlobSequence, _a1 error) *StateBlobSequencerReader_GetLastBlobSequence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateBlobSequencerReader_GetLastBlobSequence_Call) RunAndReturn(run func(context.Context, pgx.Tx) (*state.BlobSequence, error)) *StateBlobSequencerReader_GetLastBlobSequence_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateBlobSequencerReader creates a new instance of StateBlobSequencerReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateBlobSequencerReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateBlobSequencerReader {
	mock := &StateBlobSequencerReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
